<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.1.xsd">
     <context:annotation-config />
     <tx:annotation-driven transaction-manager="transactionManager" />
	<!-- post-processors for all standard configuration annotations -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>
<!-- 	<context:component-scan base-package="org.ugate.service"> -->
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/> -->
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
<!-- 	</context:component-scan> -->
	<bean id="dbProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="URL">${ugate.db.connection.url}</prop>
				<prop key="user">${ugate.db.username}</prop>
				<prop key="password">${ugate.db.password}</prop>
			</props>
		</property>
	</bean>
	<bean id="RemoteNodeDao" class="${ugate.dao.package}.RemoteNodeDao"
		depends-on="entityManagerFactory" />
	<bean id="RemoteNodeService" class="${ugate.db.package}.RemoteNodeService"
		depends-on="RemoteNodeDao" />
	<bean id="CredentialDao" class="${ugate.dao.package}.CredentialDao"
		depends-on="entityManagerFactory" />
	<bean id="CredentialService" class="${ugate.db.package}.CredentialService"
		depends-on="CredentialDao" />
	<!-- =========================================================== -->
	<!-- Atomikos JDBC data source configuration -->
	<!-- =========================================================== -->
	<bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		destroy-method="close" depends-on="dbProperties">
		<property name="xaProperties" ref="dbProperties" />
		<property name="minPoolSize" value="2" />
		<property name="maxPoolSize" value="50" />
		<property name="xaDataSourceClassName" value="${ugate.db.jta.ds.xa}" />
		<property name="UniqueResourceName" value="${ugate.db.jta.ds.name}" />
		<property name="testQuery" value="${ugate.db.test.query}" />
	</bean>
	<!-- =========================================================== -->
	<!-- Atomikos connection pool configuration -->
	<!-- =========================================================== -->
<!-- 	<bean id="xaFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory"> -->
<!-- 		<property name="brokerURL"> -->
<!-- 			<value>tcp://localhost:61616</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 	<bean id="connectionFactory" class="com.atomikos.jms.AtomikosConnectionFactoryBean" -->
<!-- 		init-method="init" destroy-method="close"> -->
<!-- 		<property name="uniqueResourceName" value="ConnectionTransaction" /> -->
<!-- 		<property name="xaConnectionFactory" ref="xaFactory" /> -->
<!-- 	</bean> -->
	<!-- =========================================================== -->
	<!-- Atomikos JTA configuration -->
	<!-- =========================================================== -->
	<bean id="atomikosSetSystemProps"
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject">
			<!-- System.getProperties() -->
			<bean
				class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetClass" value="java.lang.System" />
				<property name="targetMethod" value="getProperties" />
			</bean>
		</property>
		<property name="targetMethod" value="putAll" />
		<property name="arguments">
			<props>
				<prop key="com.atomikos.icatch.output_dir">
					^${user.home}/${project.artifactId}/atomikos
				</prop>
				<prop key="com.atomikos.icatch.log_base_dir">
					^${user.home}/${project.artifactId}/atomikos
				</prop>
			</props>
		</property>
	</bean>
	<!-- DEBUG TX with log administrator console -->
<!-- 	<bean id="atomikosLogAdministrator" class="com.atomikos.icatch.admin.imp.LocalLogAdministrator" /> -->
	<bean id="atomikosUserTransactionService" depends-on="atomikosSetSystemProps"
		class="com.atomikos.icatch.config.UserTransactionServiceImp"
		init-method="init" destroy-method="shutdownForce">
		<constructor-arg>
			<!-- IMPORTANT: specify all Atomikos properties here -->
			<props>
				<prop key="com.atomikos.icatch.service">
					com.atomikos.icatch.standalone.UserTransactionServiceFactory
				</prop>
				<prop key="com.atomikos.icatch.max_timeout">
					${ugate.db.tx.timeout}
				</prop>
				<prop key="com.atomikos.icatch.default_jta_timeout">
					${ugate.db.tx.timeout}
				</prop>
				<prop key="com.atomikos.icatch.console_log_level">
					WARN
				</prop>
				<prop key="com.atomikos.icatch.enable_logging">
					false
				</prop>
			</props>
		</constructor-arg>
<!-- 		<property name="initialLogAdministrators"> -->
<!-- 			<list> -->
<!-- 				<ref bean="atomikosLogAdministrator" /> -->
<!-- 			</list> -->
<!-- 		</property> -->
	</bean>
	<bean id="transactionManager" depends-on="dataSource"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>
	<bean id="atomikosTransactionManager" depends-on="atomikosUserTransactionService"
		class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init"
		destroy-method="close">
		<property name="forceShutdown" value="true" />
		<property name="startupTransactionService" value="false" />
	</bean>
	<bean id="atomikosUserTransaction" depends-on="atomikosUserTransactionService"
		class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="${ugate.db.tx.timeout}" />
	</bean>
	<!-- =========================================================== -->
	<!-- JPA configuration -->
	<!-- =========================================================== -->
	<bean id="entityManagerFactory" 
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="${project.artifactId}" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
				<property name="database" value="H2" />
			</bean>
		</property>
<!-- 		<property name="jpaPropertyMap"> -->
<!-- 			<map> -->
<!-- 				<entry key="openjpa.jdbc.SynchronizeMappings" -->
<!-- 					value="buildSchema(SchemaAction=add,ForeignKeys=true)" /> -->
<!-- 				<entry key="openjpa.Log" value="DefaultLevel=${ugate.log.level}, Tool=${ugate.log.level}, SQL=${ugate.log.level}" /> -->
<!-- 				<entry key="openjpa.ConnectionFactoryProperties" value="PrettyPrint=true, PrettyPrintLineLength=72" /> -->
				
<!-- 				<entry key="openjpa.jdbc.JDBCListeners" value="${ugate.db.listeners}"/> -->
<!-- 				<entry key="openjpa.jdbc.DBDictionary" -->
<!-- 					value="org.apache.openjpa.jdbc.sql.H2Dictionary(useGetObjectForBlobs=false)" /> -->
<!-- 				<entry key="openjpa.ConnectionFactoryMode" value="managed" /> -->
<!-- 				<entry key="openjpa.TransactionMode" value="managed" /> -->
<!-- 				<entry key="openjpa.ManagedRuntime" -->
<!-- 					value="invocation(TransactionManagerMethod=com.atomikos.icatch.jta.TransactionManagerImp.getTransactionManager)" /> -->
<!-- 			</map> -->
<!--  		</property> -->
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaDialect" />
		</property>
		<!-- load weaver not required for OpenJPA -->
<!-- 		<property name="loadTimeWeaver"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.instrument.classloading.SimpleLoadTimeWeaver" /> -->
<!-- 		</property> -->
	</bean>
</beans>