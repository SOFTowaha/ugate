<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
     http://www.springframework.org/schema/beans 
     http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
     http://www.springframework.org/schema/tx 
     http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
     http://www.springframework.org/schema/aop 
     http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
     http://www.springframework.org/schema/context
     http://www.springframework.org/schema/context/spring-context-3.1.xsd">
     <context:annotation-config />
     <tx:annotation-driven transaction-manager="transactionManager" />
	<!-- post-processors for all standard configuration annotations -->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor" />
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor"/>
<!-- 	<context:component-scan base-package="org.ugate.service"> -->
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/> -->
<!-- 		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/> -->
<!-- 	</context:component-scan> -->
	<bean id="dbProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="URL">jdbc:h2:~/ugate;AUTO_SERVER=TRUE;FILE_LOCK=SOCKET;TRACE_LEVEL_FILE=0;TRACE_LEVEL_SYSTEM_OUT=0</prop>
				<prop key="user">sa</prop>
				<prop key="password">sa</prop>
			</props>
		</property>
	</bean>
	<bean id="SettingsDao" class="org.ugate.service.dao.SettingsDao"
		depends-on="entityManagerFactory" />
	<bean id="SettingsService" class="org.ugate.service.SettingsService"
		depends-on="SettingsDao" />
	<bean id="CredentialDao" class="org.ugate.service.dao.CredentialDao"
		depends-on="entityManagerFactory" />
	<bean id="CredentialService" class="org.ugate.service.CredentialService"
		depends-on="CredentialDao" />
	<!-- =========================================================== -->
	<!-- Atomikos JDBC data source configuration -->
	<!-- =========================================================== -->
	<bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
		destroy-method="close" depends-on="dbProperties">
		<property name="xaProperties" ref="dbProperties" />
		<property name="minPoolSize" value="2" />
		<property name="maxPoolSize" value="50" />
		<property name="xaDataSourceClassName" value="org.h2.jdbcx.JdbcDataSource" />
		<property name="UniqueResourceName" value="jdbc/ugateDS" />
		<property name="testQuery" value="SELECT 1 and SELECT 1 FROM DUAL" />
	</bean>
	<!-- =========================================================== -->
	<!-- Atomikos connection pool configuration -->
	<!-- =========================================================== -->
<!-- 	<bean id="xaFactory" class="org.apache.activemq.ActiveMQXAConnectionFactory"> -->
<!-- 		<property name="brokerURL"> -->
<!-- 			<value>tcp://localhost:61616</value> -->
<!-- 		</property> -->
<!-- 	</bean> -->
<!-- 	<bean id="connectionFactory" class="com.atomikos.jms.AtomikosConnectionFactoryBean" -->
<!-- 		init-method="init" destroy-method="close"> -->
<!-- 		<property name="uniqueResourceName" value="ConnectionTransaction" /> -->
<!-- 		<property name="xaConnectionFactory" ref="xaFactory" /> -->
<!-- 	</bean> -->
	<!-- =========================================================== -->
	<!-- Atomikos JTA configuration -->
	<!-- =========================================================== -->
	<bean id="transactionManager"
		class="org.springframework.transaction.jta.JtaTransactionManager">
		<property name="transactionManager" ref="atomikosTransactionManager" />
		<property name="userTransaction" ref="atomikosUserTransaction" />
	</bean>
	<bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager"
		init-method="init" destroy-method="close">
		<property name="forceShutdown" value="true" />
	</bean>
	<bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
		<property name="transactionTimeout" value="6000" />
	</bean>
	<!-- =========================================================== -->
	<!-- JPA configuration -->
	<!-- =========================================================== -->
	<bean id="entityManagerFactory" depends-on="dataSource"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="ugate" />
		<property name="dataSource" ref="dataSource" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter">
				<property name="showSql" value="true" />
				<property name="generateDdl" value="true" />
				<property name="database" value="H2" />
			</bean>
		</property>
		<property name="jpaPropertyMap">
			<map>
				<entry key="openjpa.jdbc.SynchronizeMappings"
					value="buildSchema(SchemaAction=add,ForeignKeys=true)" />
				<entry key="openjpa.Log" value="DefaultLevel=INFO, Tool=INFO, SQL=INFO" />
				<!-- <entry key="openjpa.jdbc.UpdateManager" value="operation-order" /> -->
				<entry key="openjpa.ConnectionFactoryProperties" value="PrettyPrint=true, PrettyPrintLineLength=72" />
				
				<entry key="openjpa.jdbc.JDBCListeners" value="org.ugate.service.UGateJdbcListener"/>
				<entry key="openjpa.jdbc.DBDictionary"
					value="org.apache.openjpa.jdbc.sql.H2Dictionary(useGetObjectForBlobs=false)" />
				<entry key="openjpa.ConnectionFactoryMode" value="managed" />
				<entry key="openjpa.TransactionMode" value="managed" />
<!-- 			<entry key="openjpa.ManagedRuntime" value="jndi(TransactionManagerName=UserTransaction)" /> -->
				<entry key="openjpa.ManagedRuntime"
					value="invocation(TransactionManagerMethod=com.atomikos.icatch.jta.TransactionManagerImp.getTransactionManager)" />
			</map>
 		</property>
		<property name="jpaDialect">
			<bean class="org.springframework.orm.jpa.vendor.OpenJpaDialect" />
		</property>
		<!-- load weaver not required for OpenJPA -->
<!-- 		<property name="loadTimeWeaver"> -->
<!-- 			<bean -->
<!-- 				class="org.springframework.instrument.classloading.SimpleLoadTimeWeaver" /> -->
<!-- 		</property> -->
	</bean>
</beans>